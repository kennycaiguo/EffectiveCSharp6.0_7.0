第1章：C#言語イディオム

2019.02.17
項目１：ローカル変数の型をなるべく暗黙的に指定すること

2019.02.17
項目2：constよりもreadonlyを使用すること

2019.02.17、2019.02.23
項目3：キャストにはisまたはasを使用すること

2019.02.23
項目4：string.Format()を補完文字列に置き換える
	
2019.02.23
項目5：カルチャ固有の文字列よりもFormattableStringを使用すること
	
2019.02.23
項目6：文字列指定のAPIを指定しないこと

2019.02.24
項目7：デリゲートを使用してコールバックを表現する

2019.02.24
項目8：イベントの呼び出し時にnull条件演算子を使用すること

2019.02.24
項目9：ボックス化およびボックス化解除を最小限に抑える

2019.03.02、2019.03.03
項目10：親クラスの変更に応じる場合のみnew修飾子を使用すること

・2019.03.03：外部ライブラリのクラスを親クラスとして利用する独自ライブラリが第3者に利用されている状況

(概要)
	・外部ライブラリBaseWidgetLibを使用して、独自ライブラリMyWidgetLibをリリース
	・クライアントMyWidgetClientが独自ライブラリMyWidgetLibを利用
(プロジェクト)
	MyWidgetClient：第3者のクライアントアプリ
(参照)
	BaseWidgetLib：外部ライブラリ
	MyWidgetLib：外部ライブラリの親クラスをサブクラス化する独自ライブラリ

・2019.03.03：外部ライブラリの親クラスの新しいメソッド名が独自ライブラリの元々のメソッド名と重複
	new修飾子を指定

(概要)
	・独自ライブラリの元々のメソッド名NormalizeValuesが外部ライブラリの親クラスの
	新しいメソッド名と重複したため、new修飾子を指定
(プロジェクト)
	NewMyWidgetClient：第3者のクライアントアプリ。内容は変更なし
(参照)
	NewBaseWidgetLib：外部ライブラリ。親クラスにサブクラスと重複する新しいメソッドが追加
	NewMyWidgetLib：独自ライブラリ。親クラスと重複するメソッドにnew修飾子を指定

・2019.03.03：外部ライブラリの親クラスの新しいメソッド名が独自ライブラリの元々のメソッド名と重複
	独自ライブラリのメソッド名を変更

(概要)
	・独自ライブラリの元々のメソッド名NormalizeValuesが外部ライブラリの親クラスの
	新しいメソッド名と重複したため、独自ライブラリのメソッド名をNormalizeAllValuesに変更
(プロジェクト)
	UpdatedMyWidgetClient：第3者のクライアントアプリ。独自ライブラリのメソッド名変更に対応
(参照)
	NewBaseWidgetLib：外部ライブラリ。親クラスにサブクラスと重複する新しいメソッドが追加
	UpdatedMyWidgetLib：独自ライブラリ。親クラスと重複するメソッド名を変更



