第3章：ジェネリックによる処理

2019.03.09、2019.03.10
項目18：最低限必要になる制約を常に定義すること

・2019.03.09：IComparable<T>制約による同値性の判定
(概要)
	・制約なしのジェネリックス関数で(AreEqual)、実行時テスト(IComparable)により同値性を判定する
	・IComparable<T>制約をつけたジェネリックス関数で(AreEqual2)、同値値性を判定する
(プロジェクト)
	Constraint：同値性判定のテストプログラム
	・比較対象のオブジェクトは、
		IComparable<string>を実装する型として、string
		IComparable<Point>を実装しない型として、独自のPointクラス
		IComparable<OrderedPoint>とIComparable<Point>を実装する型として、Pointの派生クラスの
		OrderedPointクラスを使用する
(コメント)
	・AreEqual関数で、第1引数を非null文字列、第2引数をnullとすると、ArgumentExceptionが発生する
	・AreEqual2関数で、第1引数をnullとすると、NullReferenceExceptionが発生する


・2019.03.10：IEquatable<T>の動的テストによる内部オーバーロード
(概要)
	・Object.Equalsを使用した同値性判定(AreEqual)
	・IEquatable<T>の動的テストによる、内部オーバーロード(AreEqual2)
(プロジェクト)
	InetrnalOverload：内部オーバーロードの同値性判定テストプログラム
	・同値性判定対象のオブジェクトは、
		IEquatable<string>を実装するクラスとして、string
		IEquatable<PointStruct>を明示的には実装してない、PointStruct構造体
		IEquatable<PointClass>を実装していない、PointClassクラス
		IEquatable<EquatablePointClass>を実装している、EquatablePointClassクラス
		を使用する
（コメント）
	・AreEqual関数で、第1引数がnullのとき、NullReferenceExceptionが発生する
	・AreEqual関数（Object.Equals）で、値の等しい２つのPointStructを同値比較すると、Trueとなる
	　これに対して、値の等しい２つのPointClassを同値比較すると、Falseとなる
	　（値型に対しては、Object.Equalsがオーバーライドされていると思われる）

・2019.03.10：ジェネリックス関数内でdefault()を使用したデフォルト値の取得
(概要)
	・ジェネリックス関数内でdefault()を使用して、値型とクラスの型引数に対応
	・型引数Tのシーケンスからテストに合致する最初の要素を返却。無ければ、default(T)を返却
(プロジェクト)
	Default：テストプログラム。型引数として、stringのシーケンスとintをシーケンスを指定

・2019.03.10：ジェネリック関数内でnew T()を使用してデフォルト値を取得
(概要)
	・引数で与えられたファクトリ関数が非nullを返したらそれを返却。nullを返したらnew T()を返却
(プロジェクト)
	New：テストプログラム。型引数として、int、PointStruct構造体、PointClassをクラスを使用


2019.03.10
項目19：実行時の型チェックを使用してジェネリックアルゴリズムを特化する

・2019.03.10：逆順に走査するシーケンス
(概要)
	・シーケンス(Enumerable)を引数に受けて、逆順に走査するシーケンスを生成する
(プロジェクト)
	GerericAlgorithm：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・文字のシーケンスとしてstring

・2019.03.10：走査対象のシーケンスが提供する機能に応じて特化する
(概要)
	・走査対象シーケンスの実行時の型を動的に調べて、シーケンスが提供する機能に応じて
	　特化した実装を提供する
(プロジェクト)
	SpecializeGeneric：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・stringキー、int値の辞書：Dictionary<strig,int>（ICollectionインターフェースを実装する）
		・文字のシーケンスとしてstring

・2019.03.10：走査対象のシーケンスがstringの場合の特殊ケースに対応
(概要)
	・走査対象シーケンスがstringの時、文字のリスト相当として特別扱いする。
	　内部的に特殊なEnumeratorクラスであるReverseStringEnumeratorを使用する
(プロジェクト)
	SpecializeString：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・stringキー、int値の辞書：Dictionary<strig,int>（ICollectionインターフェースを実装する）
		・文字のシーケンスとしてstring

2019.03.11
項目20：IComparable<T>とIComparableにより順序関係を実装する

・2019.03.11：IComparable<T>とIComparableによる自然な順序付け
(概要)
	・IComparable<T>とIComparableを実装し、型に自然な順序を定義する
	・IComparableは明示的に実装する
(プロジェクト)
	NatuaralOrder：テストプログラム。以下をテストする
		・CompareToメソッドを使用して、２つのCustomerを比較する
		・IComparable.CompareToを使用して、CustomerとEmployee（Customer以外のもの）を比較する
		・自然な順序で、List<Customer>をソートする
(コメント)
	・明示的な実装IComparable.CompareToは、publicとすることはできない（コンパイルエラーとなる）

・2019.03.11：関係演算子による大小比較
(概要)
	・自然な順序を反映した関係演算子を定義（CompareToメソッドを呼び出す)
(プロジェクト)
	RelationOperators：テストプログラム。
		4つの大小比較演算子を、異なる２つのCusotomerと同値な２つのCustomerで呼び出す

・2019.03.11：Comparison<T>デリゲートによる自然な順序以外の大小比較の導入
(概要)
	・収入によるComparison<T>デリゲートを実装し、List<Customer>をこの基準でソートする
(プロジェクト)
	CoparisonDelegate：テストプログラム。

・2019.03.11：Comparer<T>インターフェースによる自然な順序以外の大小比較の導入
(概要)
	・収入による比較を行うRevenueComparerを、インターフェースComparer<Customer>を実装する
	　内部クラスとして実装し、List<Customer>をこの基準でソートする
	・また、この内部クラスのインスタンスを取得するための静的プロパティーRevenueCompareを
	　用意する。
	　この静的プロパティーは、Lazy<RevenueComparer>を使用することで、初めてプロパティ
	　にアクセスしたときに、RevenueComparerを遅延生成する。
(プロジェクト)
	ComparerInterface：テストプログラム。


2019.03.12
項目21：破棄可能な型引数をサポートするようにジェネリック型を作成すること

・2019.03.12：型引数のインスタンスをローカル変数として作成する
(概要)
	・ジェネリッククラスの型引数のインスタンスをローカル変数として作成する時、型引数がIDisposable
	　を実装している場合には、Disposeを呼び出す必要がある
(プロジェクト)
	LocalDisposableVariable：テストプログラム（プロジェクト名をDisposableLocalVariableに変えたい）
		・Disposeを呼び出さない問題のある実装をテスト
		・usingとIDisposalへのキャストを組み合わせて、IDisposableを実装ていればDisposeを呼び出す
		　実装のテスト

・2019.03.12：型引数のインスタンスをフィールド変数として作成する
(概要)
	・ジェネリッククラスの型引数のインスタンスをフィールド変数として作成する時、
	　ジェネリッククラス自体がIDisposabelを実装する必要がある
(プロジェクト)
	DisposableFieldVariable：テストプログラム

・2019.03.12：型引数のインスタンスの所有権を呼び出し側に委ねる
(概要)
	・ジェネリッククラスの型引数のインスタンスのジェネリックスクラスの外に置くことで、
	　破棄の責任を呼び出し側に委ねる
(プロジェクト)
	WithoutOwnership：テストプログラム


2019.03.13
項目22：ジェネリックの共変性と反変性をサポートする

・2019.03.13：配列型の共変性
(概要)
	・配列型は共変性があるがタイプセーフではない
(プロジェクト)
	ArrayVariance：テストプログラム
		・基底クラス[]型を引数とし、引数の要素を取り出して出力する関数に、
		　派生クラス[]引数を渡す(正しい)
		・基底クラス[]型を引数とし、引数の要素に代入する関数に、
		　派生クラス[]引数を渡す（ArrayTypeMisimatchException)
		・基底クラス[]型の変数①に、派生クラス[]型のオブジェクトを代入し、
		　変数①の要素に別の派生クラスオブジェクトを代入する(ArrayTypeMisimatchException)
(コメント)
	・staticクラスのstaticメンバ関数をstaticクラスの修飾なしで呼び出すためにusing static文を使う
	　		

・2019.03.13：共変性のあるジェネリッククラス
(概要)
	・共変性をもつジェネリッククラスを利用する
(プロジェクト)
	CoVariance：テストプログラム
		・IEnumerable<CelestialBody>型(共変性）の引数を持つ関数に、IEnumerable<Planet>型の
		　オブジェクトを渡す(正しい)
		・IList<CelestialBody>型（不変）の引数を持つ関数に、IList<Planet>型の
		　オブジェクトを渡す(コンパイルエラー）

・2019.03.13：反変性のあるジェネリッククラス
(概要)
	・反変性をもつジェネリッククラスを利用する
(プロジェクト)
	ContraVariance：テストプログラム
		・IComparable<CelestialBody>インターフェース(反変性）を使って、派生クラス間で比較を行う

・2019.03.13：ジェネリックデリゲートの変性
(概要)
	・デリゲートをメソッドに含むインターフェースの変性
	・共変性を持つインターフェース：
		型引数Tをリターン値とするデリゲートを返すメソッド
		型引数Tを関数引数とするデリゲートを引数とするメソッド
	・反変性を持つインターフェース：
		型引数Tをリターン値するデリゲートを引数とするメソッド
		型引数Tを引数とするデリゲートを返すメソッド
(プロジェクト)
	DelegateVariance：テストプログラム
		・共変性を持つインターフェースと反変性を持つインターフェースの実装してテストする


2019.03.14
項目23：型パラメータにおけるメソッドの制約をデリゲートとして定義する

・2019.03.14：ジェネリックメソッドの引数の制約をデリゲートとして定義する
(概要)
	・デリゲート引数を呼び出して加算を計算するジェネリック関数
(プロジェクト)
	DelegateAsFuncArg：テストプログラム

・2019.03.14：ジェネリックメソッドの引数の制約をインターフェースとして定義する
(概要)
	・インターフェースを実装したクラスのメソッドを呼び出して加算を計算するジェネリック関数
(プロジェクト)
	InterfaceAsFuncArg：テストプログラム

・2019.03.14：シーケンスを処理するアルゴリズムの制約をデリゲートで実装する
(概要)
	・２つのシーケンスをデリゲート引数として渡されたメソッドによって組み合わせて
	　新しいシーケンスを返すZip関数の実装
(プロジェクト)
	DelegateAsSequenceAlgorithm：テストプログラム
(コメント)
	・getだけが定義されたプロパティに対して、クラス内では設定することができる

		public class Point
		{
	        public double X { get; }
	        public double Y { get; }
	        public Point(double x, double y)
	        {
	            this.X = x;
	            this.Y = y;
	        }
			・・・
		}

・2019.03.14：ジェネリッククラスのデータメンバにデリゲートを登録する
(概要)
	・型引数Tに対して、引数を持つコンストラクタT(TextReader)をジェネリッククラスから呼び出すために、
	　ファクトリ関数相当をデリゲートとして、データメンバに登録する
	　（型引数に引数付きコンストラクタ制約を指定できないため）
	・デリゲートの登録は、ジェネリッククラスのコンストラクタで行う
(プロジェクト)
	DelegateAsField：テストプログラム
(コメント)
	・Point(TextReader)コンストラクタはEOFに遭遇すると、line.Split(',')の箇所で、
	　NullReferenceExceptionを発生する問題がある。
	　そのため、テストプログラムでは、NullReferenceExceptionをキャッチすることで、
	　EOFを判定するようにしている

・2019.03.14：上記プロジェクトの非ジェネリックバージョン（Point専用のInputCollection）
(概要)
	・非ジェネリッククラスなので、引数付きのPointコンストラクタを呼び出すことができる
(プロジェクト)
	NonGenericInputCollection：テストプログラム


2019.03.15
項目24：親クラスやインターフェース用に特化したジェネリックメソッドを作成しないこと

・2019.03.15：親クラスやインターフェースに特化した、ジェネリックメソッドのオーバーロード
(概要)
	・クラス階層において、全体にマッチするジェネリックメソッドと、親クラスやインターフェースに
	　特化したメソッドをオーバーロードする
(プロジェクト)
	SpecializeBase：テストプログラム

・2019.03.15：実行時型チェックにより、特定の親クラスやインターフェースを特化
(概要)
	・全体にマッチするジェネリックメソッドにおいて、実行時の型チェックによって、
	　特定の親クラスやインターフェースを特化する
(プロジェクト)
	RuntimeSpecializeBase：テストプログラム


2019.03.16
項目25：型引数がインスタンスのフィールドでない場合にはジェネリックメソッドとして定義すること

・2019.03.16：ジェネリックなstaticユーティリティクラス
(概要)
	・ジェネリックなstaticユーティリティクラスにより、Min、Maxメソッドを実装
(プロジェクト)
	GenericStaticUtility：テストプログラム

・2019.03.16：非ジェネリックなstaticユーティリティクラス
(概要)
	・非ジェネリックなstaticユーティリティクラスに、Min、Maxジェネリックメソッドと、
	　数値型に特化したオーバーロードを定義。
	　呼び出し時の引数型に応じて最適なバージョンが選択される
(プロジェクト)
	NonGenericStaticUtility：テストプログラム

・2019.03.16：すべての型を担当するジェネリックメソッドを定義
(概要)
	・非ジェネリッククラスにおいて、個々の型に対応するメソッドの実装になるような、
	　すべてを担当するジェネリックメソッドを定義する
	・ここでは、すべての型のシーケンスを文字列に変換するジェネリックメソッドを定義する
(プロジェクト)
	NonGenericClassGenericMethod：テストプログラム


2019.03.16、2019.03.17、2019.03.18
項目26：ジェネリックインターフェースとともに古いインターフェースを実装すること

・2019.03.16、2019.03.17：ジェネリックインターフェースIComparable<T>、IEquatable<T>を実装する
(概要)
	・ジェネリックスインターフェースIComparable<T>、IEquatbale<T>を実装し、順序関係と同値関係を
	　Nameクラスに定義する
	・非ジェネリックスインターフェースは実装しないバージョン
(プロジェクト)
	GenericInterfaceVersion：テストプログラム。
	　順序関係として以下をテストする
		・CompareTo実装のロジックのテスト
		・List<Name>のSort（ジェネリックな大小比較IComparable<Name>を使用する）
		・Nameのリストを保持したArrayListのSort（非ジェネリックな比較IComparableを使用する）
		・Nameと、Nameの派生クラスDerivedNameの大小比較
	　同値関係としては以下をテストする
	　	・Equals実装のロジックのテスト
	　	・同値演算子（==、!=）のテスト
	　	・Dictionary<Name,string>のキーとして使用し、Add()とTryGetValue()で同値なNameに対する
	　	　値の取得を行うテスト
		・Nameと、Nameの派生クラスDerivedNameの同値判定
(コメント)
	・ArrayList.Sortでは、「System.ArgumentException: 少なくとも 1 つのオブジェクトで 
		IComparable を実 装しなければなりません。」の例外発生する
	・Nameと派生クラスとの比較では、Name部分の比較が行われる
	・同値演算子は、参照の同値性を判定している
	　（同値演算子をオーバーロードするべき）
	・Dictionayに登録したキーと同値な別のNameオブジェクトをキーとして、Dictionalを参照すると、
	　値が得られない
	　（GetHashCodeメソッドをオーバーライドすべき）
	・Nameと派生クラスとの同値判定では、Name部分で同値判定される
	　(引数の型をGetType()で調べて、typeof(Name)と一致しない時は、同値としないほうがよい）

・2019.03.17：System.Objectを使用した同値性判定ユーティリティメソッドCheckEqualityの導入
(概要)
	・System.Objectを使用した同値性判定ユーティリティメソッドCheckEqualityを導入し、
	　Nameオブジェクト間の同値性を判定する
(プロジェクト)
	CheckEqualityUtility：テストプログラム。

・2019.03.17：IEquuable<T>を実装するクラス用に、同値性判定メソッドCheckEqualityをオーバーロードする
(概要)
	・IEquuable<T>を実装するクラス用に、同値性判定メソッドCheckEqualityをオーバーロードし、
	　Nameオブジェクト間の同値性を判定する
(プロジェクト)
	OverloadCheckEquality：テストプログラム。

・2019.03.17：NameクラスでObject.Equlasをオーバーライドする
(概要)
	・Nameクラスで、Object.Equalsをオーバーライドし、Object経由でのNameの同値性判定を正しく行う
(プロジェクト)
	OverrideObjectEquals：テストプログラム。以下のテスト行う
		・Object経由で同値性判定を行う、CheckEqualityメソッドの動作テスト
		・等価演算子(==、!=)の動作テスト
(コメント)
	・等価演算子は、Object.Equalsのオーバーライドとは関係なく、参照の同値性に基づいて判定する模様
	・Name.Equalsオーバーライドにて、obj.GetType()を実行する前に、objのnullチェックが必要
	
	    public override bool Equals(object obj)
        {
            // 2019.03.17 add: check obj == null
            if (obj == null)
                return false;

            if (obj.GetType() == typeof(Name))
                return this.Equals(obj as Name);
            else return false;
        }

・2019.03.17：NameクラスでObject.GetHashCodeをオーバーライドする
(概要)
	・Nameクラスで、Object.GetHashCodeをオーバーライドし、ハッシュテーブルのキー検索を正しく行う
(プロジェクト)
	OverrideGetHashCode：テストプログラム。以下のテスト行う
	　	・Dictionary<Name,string>のキーとして使用し、Add()とTryGetValue()で同値なNameに対する
	　	　値の取得を行うテスト

・2019.03.17：Nameクラスで等価演算子をオーバーロードする
(概要)
	・Nameクラスで、等価演算子(==、!=)をオーバーロードし、等価演算子を使用した等価判定を正しく行う
(プロジェクト)
	OverloadEqualityOperators：テストプログラム
(コメント)
	・等価演算子内で、左辺のnullチェックを行うために、left==nullを使用するとスタックオーバーフロー
	　となる。代わりに、Object.RefernceEqualsを用いる

        public static bool operator ==(Name left, Name right)
        {
            /* 2019.03.17 change: stack overflow
            if (left == null)
                return right == null;
            */
            if (Object.ReferenceEquals(left, null))
                return Object.ReferenceEquals(right, null);
            return left.Equals(right);
        }
