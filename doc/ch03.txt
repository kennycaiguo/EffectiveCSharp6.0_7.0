第3章：ジェネリックによる処理

2019.03.09、2019.03.10
項目18：最低限必要になる制約を常に定義すること

・2019.03.09：IComparable<T>制約による同値性の判定
(概要)
	・制約なしのジェネリックス関数で(AreEqual)、実行時テスト(IComparable)により同値性を判定する
	・IComparable<T>制約をつけたジェネリックス関数で(AreEqual2)、同値値性を判定する
(プロジェクト)
	Constraint：同値性判定のテストプログラム
	・比較対象のオブジェクトは、
		IComparable<string>を実装する型として、string
		IComparable<Point>を実装しない型として、独自のPointクラス
		IComparable<OrderedPoint>とIComparable<Point>を実装する型として、Pointの派生クラスの
		OrderedPointクラスを使用する
(コメント)
	・AreEqual関数で、第1引数を非null文字列、第2引数をnullとすると、ArgumentExceptionが発生する
	・AreEqual2関数で、第1引数をnullとすると、NullReferenceExceptionが発生する


・2019.03.10：IEquatable<T>の動的テストによる内部オーバーロード
(概要)
	・Object.Equalsを使用した同値性判定(AreEqual)
	・IEquatable<T>の動的テストによる、内部オーバーロード(AreEqual2)
(プロジェクト)
	InetrnalOverload：内部オーバーロードの同値性判定テストプログラム
	・同値性判定対象のオブジェクトは、
		IEquatable<string>を実装するクラスとして、string
		IEquatable<PointStruct>を明示的には実装してない、PointStruct構造体
		IEquatable<PointClass>を実装していない、PointClassクラス
		IEquatable<EquatablePointClass>を実装している、EquatablePointClassクラス
		を使用する
（コメント）
	・AreEqual関数で、第1引数がnullのとき、NullReferenceExceptionが発生する
	・AreEqual関数（Object.Equals）で、値の等しい２つのPointStructを同値比較すると、Trueとなる
	　これに対して、値の等しい２つのPointClassを同値比較すると、Falseとなる
	　（値型に対しては、Object.Equalsがオーバーライドされていると思われる）

・2019.03.10：ジェネリックス関数内でdefault()を使用したデフォルト値の取得
(概要)
	・ジェネリックス関数内でdefault()を使用して、値型とクラスの型引数に対応
	・型引数Tのシーケンスからテストに合致する最初の要素を返却。無ければ、default(T)を返却
(プロジェクト)
	Default：テストプログラム。型引数として、stringのシーケンスとintをシーケンスを指定

・2019.03.10：ジェネリック関数内でnew T()を使用してデフォルト値を取得
(概要)
	・引数で与えられたファクトリ関数が非nullを返したらそれを返却。nullを返したらnew T()を返却
(プロジェクト)
	New：テストプログラム。型引数として、int、PointStruct構造体、PointClassをクラスを使用


2019.03.10
項目19：実行時の型チェックを使用してジェネリックアルゴリズムを特化する

・2019.03.10：逆順に走査するシーケンス
(概要)
	・シーケンス(Enumerable)を引数に受けて、逆順に走査するシーケンスを生成する
(プロジェクト)
	GerericAlgorithm：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・文字のシーケンスとしてstring

・2019.03.10：走査対象のシーケンスが提供する機能に応じて特化する
(概要)
	・走査対象シーケンスの実行時の型を動的に調べて、シーケンスが提供する機能に応じて
	　特化した実装を提供する
(プロジェクト)
	SpecializeGeneric：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・stringキー、int値の辞書：Dictionary<strig,int>（ICollectionインターフェースを実装する）
		・文字のシーケンスとしてstring

・2019.03.10：走査対象のシーケンスがstringの場合の特殊ケースに対応
(概要)
	・走査対象シーケンスがstringの時、文字のリスト相当として特別扱いする。
	　内部的に特殊なEnumeratorクラスであるReverseStringEnumeratorを使用する
(プロジェクト)
	SpecializeString：テストプログラム。走査対象のシーケンスとして
		・intのシーケンス：IEnumerable<int>（Enumerable.Range()により生成）
		・intのシーケンスをIEnumerableにキャストしたもの
		・intのリスト：List<int>
		・intのリストをIEnumerable<int>にキャストしたもの
		・stringキー、int値の辞書：Dictionary<strig,int>（ICollectionインターフェースを実装する）
		・文字のシーケンスとしてstring

2019.03.11
項目20：IComparable<T>とIComparableにより順序関係を実装する

・2019.03.11：IComparable<T>とIComparableによる自然な順序付け
(概要)
	・IComparable<T>とIComparableを実装し、型に自然な順序を定義する
	・IComparableは明示的に実装する
(プロジェクト)
	NatuaralOrder：テストプログラム。以下をテストする
		・CompareToメソッドを使用して、２つのCustomerを比較する
		・IComparable.CompareToを使用して、CustomerとEmployee（Customer以外のもの）を比較する
		・自然な順序で、List<Customer>をソートする
(コメント)
	・明示的な実装IComparable.CompareToは、publicとすることはできない（コンパイルエラーとなる）

・2019.03.11：関係演算子による大小比較
(概要)
	・自然な順序を反映した関係演算子を定義（CompareToメソッドを呼び出す)
(プロジェクト)
	RelationOperators：テストプログラム。
		4つの大小比較演算子を、異なる２つのCusotomerと同値な２つのCustomerで呼び出す

・2019.03.11：Comparison<T>による自然な順序以外の大小比較の導入
(概要)
	・収入によるComparison<T>デリゲートを実装し、List<Customer>をこの基準でソートする
(プロジェクト)
	CoparisonDelegate：テストプログラム。
