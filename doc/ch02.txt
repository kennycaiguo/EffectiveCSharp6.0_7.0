2019.03.03
項目11：.NETリソース管理を理解する

・2019.03.03：C++のデストラクタを利用してリソースを開放する
(概要)
	・C++プロジェクトを作成し、CriticalSectionクラスのデストラクタでリソースを開放する
	利用者側は、CriticalSectionをオート変数として定義する
(プロジェクト)
	CppDestructor：デストラクタの動作を確認するサンプルアプリ

・2019.03.03：C＃のファイナライザを利用してリソースを開放する
(概要)
	・C＃プロジェクトを作成し、CriticalSectionクラスのファイナライザでリソースを開放する
	利用者側は、CriticalSectionオブジェクトをヒープ上に作成する
(プロジェクト)
	CSharpFinalizer：ファイナライザの動作を確認するサンプルアプリ

項目11：.NETリソース管理を理解する

・2019.03.03：C++のデストラクタを利用してリソースを開放する
(概要)
	・C++プロジェクトを作成し、CriticalSectionクラスのデストラクタでリソースを開放する
	利用者側は、CriticalSectionをオート変数として定義する
(プロジェクト)
	CppDestructor：デストラクタの動作を確認するサンプルアプリ


2019.03.04
項目12：メンバには割当演算子よりもオブジェクト初期化子を使用すること

・2019.03.04：オブジェクト初期化子
(概要)
	・オブジェクト初期化子の利用例
(プロジェクト)
	ObjectInitializer：オブジェクト初期化子によってListメンバを初期化
	
・2019.03.04：システムによるゼロ初期化
(概要)
	・システムによって値型変数をゼロ初期化、明示的な初期化処理を省略
(プロジェクト)
	ZeroInitialize：システムによって値型変数を初期化して表示
(コメント)
	オート変数の値型変数を初期化子なしで宣言すると、「未割当のローカル変数」のエラーが出る
	
・2019.03.04：オブジェクト初期化子とコンストラクタによる複数回の初期化
システムによるゼロ初期化
(概要)
	・オブジェクト初期化子によって初期化後、さらにコンストラクタによって別の値に初期化
(プロジェクト)
	MultipleInitialize：メンバ変数を初期化して表示

	
2019.03.04
項目13：staticメンバを適切に初期化すること

・2019.03.04：staticメンバを利用したシングルトンの実装
(概要)
	・staticメンバ変数を利用してシングルトンパターンを実装
(プロジェクト)
	Singleton：シングルトンインスタンスを複数取得

