第4章　LINQを扱う処理

2019.03.21、2019.03.23、2019.03.24
項目29:コレクションを返すメソッドではなくイタレータを返すメソッドとすること

・2019.03.21：イタレータメソッド
(概要)
	・すべてのアルファベット文字を生成するイタレータメソッド
(プロジェクト)
	IteratorMethod：テストプログラム

・2019.03.21：巨大なシーケンスを生成するイタレータメソッド
(概要)
	・Enumerable.Range()を使用して、0から最大値までのすべての整数値を生成するイタレータを利用して、
	　100個までの素数を表示する
(プロジェクト)
	EnumerableRange：テストプログラム

・2019.03.23、2019.03.24：引数をとるイタレータメソッド
(概要)
	・引数で指定された2つの文字間の文字を生成するイタレータメソッド
	・イタレータメソッド内では、ループに入る前に引数チェックを行うが、イタレータメソッドの
	　呼び出し側で反復を実際に実行するまでエラーが発生しない
	・コンパイラ生成のイタレータコードに対しても同様のチェックを行う
(プロジェクト)
	IteratorMethodWithArguments：テストプログラム

・2019.03.24：イタレータメソッドにおいて、引数のチェックを分離
(概要)
	・引数のチェックをした後で、内部のイタレータメソッドを呼び出すことで、エラーがあった場合には、
	　反復を開始する前に例外を発生させることが可能となる
(プロジェクト)
	SeparateErrorCheck：テストプログラム


2019.03.24、2019.03.25
項目30:ループよりもクエリ構文を使用すること

・2019.03.24：ループ構文
(概要)
	・ループ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	LoopStatement：テストプログラム


・2019.03.24：クエリ構文
(概要)
	・クエリ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	QueryStatement：テストプログラム

・2019.03.24：ネストしたループ処理とネストしたクエリ処理の比較
(概要)
	・0から100未満の整数の組み合わせのペアを、ネストしたループ処理とクエリしたクエリ処理によって
	　生成する
(プロジェクト)
	GenerateTuple：テストプログラム

・2019.03.24：ネストしたループとネストしたクエリでフィルタされたシーケンスを生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、ネストしたループ処理と
	　クエリしたクエリ処理によって生成する
(プロジェクト)
	GenerateFilteredTuple：テストプログラム


・2019.03.24：ループとクエリでフィルタされ、ソートされたシーケンスを生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、原点からの距離の
	　降順で生成する処理を、ループとクエリで行う
(プロジェクト)
	GenerateFilteredSortedTuple：テストプログラム

・2019.03.24：フィルタされ、ソートされたシーケンスをクエリメソッドによって生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、原点からの距離の
	　降順で生成する処理を、クエリメソッドで行う
(プロジェクト)
	QueryMethod：テストプログラム


2019.03.26
項目31：シーケンス用の組み合わせ可能なAPIを作成する

・2019.03.26：ループ構造を使って整数入力を重複なく出力する
(概要)
	・整数のシーケンスを受け取り、出力コンソールに重複なく出力する
(プロジェクト)
	UniquLoop：テストプログラム

・2019.03.26：イタレータメソッドを使って、整数のシーケンスの重複を取り除く
(概要)
	・整数のシーケンスを受け取り、重複を取り除いたシーケンスを返すイタレータメソッドを実装する
	・これを使って整数入力を出力コンソールに重複なく出力する
(プロジェクト)
	UniquIterator：テストプログラム

・2019.03.26：上記イタレータメソッドのトレース
(概要)
	・整数のシーケンスを受け取り、重複を取り除いたシーケンスを返すイタレータメソッドの動作を
	　トレースする
	・これを使って整数入力を出力コンソールに重複なく出力する
(プロジェクト)
	TraceUniquIterator：テストプログラム

・2019.03.26：入力シーケンスの重複を取り除いたシーケンスを返すジェネリックなイタレータメソッド
(概要)
	・ジェネリック型の入力シーケンスを受け取り、重複を取り除いた出力シーケンスを返す
	　ジェネリックなイタレータメソッドを実装する
	・これを使って整数入力と文字列入力を出力コンソールに重複なく出力する
(プロジェクト)
	GenericUniquIterator：テストプログラム

・2019.03.26：イタレータメソッドの合成
(概要)
	・入力シーケンスの重複を取り除いて出力シーケンスとするイタレータの出力を、入力シーケンス
	　の要素の2乗を出力シーケンスとするイタレータの入力とする(つまり、重複を取り除いて2乗する)
(プロジェクト)
	SquareUniquIterator：テストプログラム

・2019.03.26：2つの入力シーケンスを組み合わせて出力シーケンスとする
(概要)
	・2つの文字列の入力シーケンスの要素の組を要素とするシーケンスを出力する
(プロジェクト)
	ZipStringSequence：テストプログラム


2019.03.27、2019.03.28
項目32：反復処理をAction、Predicate、Funcと分離する

・2019.03.27：リストに対する、PredicateとFuncコールバック処理
(概要)
	・整数のリストに対して以下を行う、
		（Predicate)RemoveAllを使って、値が5である要素をすべて削除する
		（Func)ForEachメソッドを使って、リスト内の要素をすべて表示する
(プロジェクト)
	ListManipulate：テストプログラム
(コメント)
	テキストの記述と異なり、myInts.RemoveAll()は起動オブジェクトを変更する

・2019.03.27：ジェネリックフィルタWhere
(概要)
	・任意の型のシーケンスに対して、Predicateによって要素をフィルターする汎用フィルター
(プロジェクト)
	WhereFilter：テストプログラム
(コメント)
	・テキストのコード例で、ArgumentNullExceptionの第1引数は引数名でなければならない

・2019.03.27：N番目ごとの要素を返すフィルター
(概要)
	・任意の型のシーケンスに対して、N番目毎の要素を出力シーケンスに含めるフィルター
(プロジェクト)
	EveryNthItemFilter：テストプログラム

・2019.03.28：シーケンス内の要素を変換する(入力と出力が同じ型）
(概要)
	・入力シーケンスの要素を変換し、新しいシーケンスを返す。入力と出力は同じ型に限定
(プロジェクト)
	SameTypeConverter：テストプログラム

・2019.03.28：シーケンス内の要素を変換する(入力と出力が異なる型）
(概要)
	・入力シーケンスの要素を変換し、新しいシーケンスを返す。入力と出力は任意に指定可能
(プロジェクト)
	DifferentTypeConverter：テストプログラム


2019.03.28
項目33：要求に応じてシーケンスの要素を生成する

・2019.03.28：整数のリストを生成する
(概要)
	・整数のリストを生成し、以下を行う
		BindingListによってデータバインディングをサポートする
		リストの先頭から条件を満たす要素からなるシーケンスを返す（匿名デリゲートとラムダ式を使う）
(プロジェクト)
	CreateIntList：テストプログラム
(コメント)
	・テキストのコード例で、BindingListの引数となるCreateSequenceの結果をToListで変換すると、
	　テキストの意図と反すると思われる。代わりに以下のようなコード例とした

            var list = CreateSequence(100, 0, 5);
            var data1 = new BindingList<int>(list);
            var data2 = new BindingList<int>(list);

            data1[5] = 10000;
            foreach (var i in data2)
                Console.Write("{0} ", i);
            Console.WriteLine();

