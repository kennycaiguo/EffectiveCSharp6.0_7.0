第4章　LINQを扱う処理

2019.03.21、2019.03.23、2019.03.24
項目29:コレクションを返すメソッドではなくイタレータを返すメソッドとすること

・2019.03.21：イタレータメソッド
(概要)
	・すべてのアルファベット文字を生成するイタレータメソッド
(プロジェクト)
	IteratorMethod：テストプログラム

・2019.03.21：巨大なシーケンスを生成するイタレータメソッド
(概要)
	・Enumerable.Range()を使用して、0から最大値までのすべての整数値を生成するイタレータを利用して、
	　100個までの素数を表示する
(プロジェクト)
	EnumerableRange：テストプログラム

・2019.03.23、2019.03.24：引数をとるイタレータメソッド
(概要)
	・引数で指定された2つの文字間の文字を生成するイタレータメソッド
	・イタレータメソッド内では、ループに入る前に引数チェックを行うが、イタレータメソッドの
	　呼び出し側で反復を実際に実行するまでエラーが発生しない
	・コンパイラ生成のイタレータコードに対しても同様のチェックを行う
(プロジェクト)
	IteratorMethodWithArguments：テストプログラム

・2019.03.24：イタレータメソッドにおいて、引数のチェックを分離
(概要)
	・引数のチェックをした後で、内部のイタレータメソッドを呼び出すことで、エラーがあった場合には、
	　反復を開始する前に例外を発生させることが可能となる
(プロジェクト)
	SeparateErrorCheck：テストプログラム


2019.03.24、2019.03.25
項目30:ループよりもクエリ構文を使用すること

・2019.03.24：ループ構文
(概要)
	・ループ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	LoopStatement：テストプログラム


・2019.03.24：クエリ構文
(概要)
	・クエリ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	QueryStatement：テストプログラム

・2019.03.24：ネストしたループ処理とネストしたクエリ処理の比較
(概要)
	・0から100未満の整数の組み合わせのペアを、ネストしたループ処理とクエリしたクエリ処理によって
	　生成する
(プロジェクト)
	GenerateTuple：テストプログラム

・2019.03.24：ネストしたループとネストしたクエリでフィルタされたシーケンスを生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、ネストしたループ処理と
	　クエリしたクエリ処理によって生成する
(プロジェクト)
	GenerateFilteredTuple：テストプログラム


・2019.03.24：ループとクエリでフィルタされ、ソートされたシーケンスを生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、原点からの距離の
	　降順で生成する処理を、ループとクエリで行う
(プロジェクト)
	GenerateFilteredSortedTuple：テストプログラム

・2019.03.24：フィルタされ、ソートされたシーケンスをクエリメソッドによって生成
(概要)
	・0から100未満の整数の組み合わせの中で、要素の和が100未満のペアを、原点からの距離の
	　降順で生成する処理を、クエリメソッドで行う
(プロジェクト)
	QueryMethod：テストプログラム


2019.03.26
項目31：シーケンス用の組み合わせ可能なAPIを作成する

・2019.03.26：ループ構造を使って整数入力を重複なく出力する
(概要)
	・整数のシーケンスを受け取り、出力コンソールに重複なく出力する
(プロジェクト)
	UniquLoop：テストプログラム

・2019.03.26：イタレータメソッドを使って、整数のシーケンスの重複を取り除く
(概要)
	・整数のシーケンスを受け取り、重複を取り除いたシーケンスを返すイタレータメソッドを実装する
	・これを使って整数入力を出力コンソールに重複なく出力する
(プロジェクト)
	UniquIterator：テストプログラム
