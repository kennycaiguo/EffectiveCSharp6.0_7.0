第4章　LINQを扱う処理

2019.03.21、2019.03.23、2019.03.24
項目29:コレクションを返すメソッドではなくイタレータを返すメソッドとすること

・2019.03.21：イタレータメソッド
(概要)
	・すべてのアルファベット文字を生成するイタレータメソッド
(プロジェクト)
	IteratorMethod：テストプログラム

・2019.03.21：巨大なシーケンスを生成するイタレータメソッド
(概要)
	・Enumerable.Range()を使用して、0から最大値までのすべての整数値を生成するイタレータを利用して、
	　100個までの素数を表示する
(プロジェクト)
	EnumerableRange：テストプログラム

・2019.03.23、2019.03.24：引数をとるイタレータメソッド
(概要)
	・引数で指定された2つの文字間の文字を生成するイタレータメソッド
	・イタレータメソッド内では、ループに入る前に引数チェックを行うが、イタレータメソッドの
	　呼び出し側で反復を実際に実行するまでエラーが発生しない
	・コンパイラ生成のイタレータコードに対しても同様のチェックを行う
(プロジェクト)
	IteratorMethodWithArguments：テストプログラム

・2019.03.24：イタレータメソッドにおいて、引数のチェックを分離
(概要)
	・引数のチェックをした後で、内部のイタレータメソッドを呼び出すことで、エラーがあった場合には、
	　反復を開始する前に例外を発生させることが可能となる
(プロジェクト)
	SeparateErrorCheck：テストプログラム


2019.03.24
項目30:ループよりもクエリ構文を使用すること

・2019.03.24：ループ構文
(概要)
	・ループ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	LoopStatement：テストプログラム


・2019.03.24：クエリ構文
(概要)
	・クエリ構文を使用して、0から100未満の整数の2乗を出力する
(プロジェクト)
	QueryStatement：テストプログラム

